(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

(define (make-frame variables values) (cons variables values))
(define (frame-variables frame) (car frame))
(define (frame-value) (cdr frame))
(define (add-binding-to-frame! variable value frame)
    (set-car! frame (cons variable (frame-variables frame)))
    (set-cdr! frame (cons value (frame-value frame))))

(define (extend-environment variables values base-env)
    (if (= (length varialbes) (length values))
        (cons (make-frame varialbes values) base-env)
        (error "")))
;查找变量
(define (lookup-varialbe-value var env)
    (define (env-loop env)
        (define (scan varialbes values)
            (cond
                ((null? env)
                    (env-loop (enclosing-environment env)))
                ((eq? var (car variables))
                    (car variables))
                (else (scan (cdr variables) (cdr values)))))))
        (if (eq? env the-empty-environment)
            (error "LOOK UP: Unbound variable" var)
            (let ((frame (first-frame env)))
                (scan (frame-variables frame) (frame-values frame)))
    (env-loop env))
;定义变量
(define (define-variable! var val env)
    (let (frame (first-frame env)))
        (define (scan variables values)
            (cond
                ((null? variables)
                    (add-binding-to-frame! var val frame))
                ((eq? var (car variables))
                    (set-car! variables val)
                (else
                    (scan (cdr variables) (cdr values))))))
        (scan (frame-variables) (frame-values)))
;设置变量
(define (set-variable-value! var val env)
    (define (env-loop env)
        (define (scan varialbes values)
            (cond
                ((null? env)
                    (env-loop (enclosing-environment env)))
                ((eq? var (car variables))
                    (set-car! values val))
                (else (scan (cdr variables) (cdr values)))))))
        (if (eq? env the-empty-environment)
            (error "SET: Unbound variable" var)
            (let ((frame (first-frame env)))
                (scan (frame-variables frame) (frame-values frame)))
    (env-loop env))